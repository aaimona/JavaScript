// JAVASCRIPT is A ZERO-BASED LANGUAGE!!!

// Don't Repeat Yourself (D.R.Y) - one of the most important rule of programming!!!

// three basic primitive types of data: strings, numbers and booleans. Other, more complex: arrays and objects

// Always finish a line of code with a semicolon.
// Two slashes mark the beginning of a comment in JS.
// === equal to, !== not equal to

// if statement syntax:
if(     ) {
  
} else {

}

// pop-up box commands: confirm() - user is asked to confirm by clicking OK; prompt() - user is asked to answer a question
// naming a variable is case-sensitive
//declaring variables:
var myVariable = 30;
// changing the value of existing variable:
myVariable = 37;

// printing stuff to the console - NOT BY PRINT COMMAND:
console.log(myVariable)

// declaring a function:
var sayHallo = function(name) {
  console.log("Hello " + name);      // every line of code in this block AND the entire function must end with a ;
};

// there is a widely accepted rule that if the name of the function is more than 1 word then all the words in the name
// except the first one should begin with capital letter, e.g. thisIsMyFunction()

// SCOPE
// variables defined outside of a function can be accessed anywhere and are called global variables
// variables defined inside a function can be accessed only inside this function and are called local variables
// the word "var" used to define a function or variable creates a new object in the current scope (local or global)

// incrementing variable by 1 e.g. inside for loop - i++, decrementing by 1 - i--, incrementing by x - i += x

// ARRAYS
// they can store different types of data at the same time. Arrays are surrounded with square brackets [] and the elements
// are separated with a comma, the array ends with a semicolon, like each line of code in JS

var cities = ["Melbourne", "Amman", "Helsinki", "NYC", "Warsaw", "Abu Dhabi", "Moscow", "Tehran", "Berlin", "San Diego"];

for (var i = 0; i < cities.length; i++) {
    console.log("I would like to visit " + cities[i]);
}
// NB #1: there is a space between "for" and () and it's ok. NB #2: second element of for statement - i<cities.length

// if i include e.g. a really long string of text in my code and i want to avoid long unwrapped lines, i can put a backslash
// at the end of one line to make the line wrap, like this:
var text = "Hey, how are you \ // backslash here!
doing? My name is Emily.";

// When using boolean values e.g. in loops, i don't need to write the whole comparison expression:
var bool = true;
while(bool === true){       // the "=== true" part is redundant here
    console.log("Less is more!");
    bool = false;
}
// instead, i can just write:
var bool = true;
while(bool){                // see? just "bool" is enough because its default value is true
    console.log("Less is more!");
    bool = false;
}

// Just an example of while loop:
var loop = function(){
	var n = 3;
	while(n > 0){
		console.log("I'm looping!");
		n--;
	};
};

// do / while loop - it runs at least once and then checks the condition to see if it should run again:
var loopCondition = false;
do {
	console.log("I'm gonna stop looping 'cause my condition is " + loopCondition + "!");	
} while (loopCondition);

// SWITCH STATEMENT
// i can use it instead of if/else if/else statement when there are many options to code:
var color = prompt("What's your favorite primary color?","Type your favorite color here");
switch(color) {
  case 'red':
    console.log("Red's a good color!");
    break;
  case 'blue':
    console.log("That's my favorite color, too!");
    break;
  case 'yellow':
      console.log("Long live yellow!");
      break;
  default:
    console.log("I don't think that's a primary color!");
}
// NB: each case ends with break in order not to execute the default response.

var answer = prompt("Which programming language do you like best?");
switch(answer) {
  case 'JavaScript':
    console.log("Srsly? It's so bushy!");
    break;
  // Add your code here!
  case 'Python':
      console.log("Now we're talking! Python's great!");
      break;
  case 'R':
      console.log("Look, we have a programming aristocrat here!");
      break;
  default:
        console.log("Uhm, so I see you're not a programmer at all.");
}

// logical operators: && and, || or, ! not

// ARRAYS
// arrays can be nested in one another, e.g. var myArray = [[1,1], [2,2]]
// arrays can be heterogenous, ie. can contain different types of data, numbers, booleans and/or strings
// jagged arrays are arrays whose nested arrays are not the same length, ie. var array = [[1], [2,2,2], [3,3]]
// adding something into an existing array: 
myArray = [4, 7, 11]; 
myArray[3] = 13; // <-- i put number 13 at position 3 (myArray's last position was 2 - 3 elements, 0-based language)

// OBJECTS
// In English, you have nouns (which you can think of as "things") and verbs (which you can think of as "actions"). 
// Until now, our nouns (data, such as numbers, strings, or variables) and verbs (functions) have been separate.
// No longer! Using objects, we can put our information and the functions that use that information in the same place.
// You can also think of objects as combinations of key-value pairs (like arrays), only their keys don't have to be 
// numbers like 0, 1, or 2: they can be strings and variables.
// an object is a collection of data enclosed in curly braces, e.g.
var me = {
name: "Kasia", // <-- comma at the end, not a semicolon
age: 30,
origin: "Poland"
}
// dot notation - a way to access an information inside an object. Here's the syntax:
ObjectName.PropertyName
// bracket notation - another way to access this info. Syntax:
ObjectName["PropertyName"] // <-- note that i need quotation marks around PropertyName
// i can create objects in two ways: with literal notation, i.e. literally typing the new object from scratch, like this:
var objectName = {
//object properties here;
}
// or with so-called constructor, like this:
var objectName = new Object();
// then i need to fill this new object with properties, created with dot notation, like this:
objectName.property1 = "34";
objectName.property2 = "true";

// METHODS
// methods are important because they allow me to:
// * change object property values,
// * make calculations based on object properties (while functions can only use parameters as input)

// i can make my own constructors that, unlike the default JS constructor, is able to create objects with properties, e.g.
function Person(name,age) {
  this.name = name;
  this.age = age;
}
var bob = new Person("Bob", 35)


